{"version":3,"file":"js/reception/visitorLog/edit~js/reception/visitorLog/index.js?id=e8d5ffca7b316a7c264b","sources":["webpack:///resources/js/views/reception/visitor-log/form.vue","webpack:///./resources/js/views/reception/visitor-log/form.vue","webpack:///./resources/js/views/reception/visitor-log/form.vue?b38f","webpack:///./resources/js/views/reception/visitor-log/form.vue?1994","webpack:///./resources/js/views/reception/visitor-log/form.vue?1a5b"],"sourcesContent":["<template>\n    <form @submit.prevent=\"proceed\" @keydown=\"visitorLogForm.errors.clear($event.target.name)\">\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.visitor_name')}}</label>\n                    <input class=\"form-control\" type=\"text\" v-model=\"visitorLogForm.name\" name=\"name\" :placeholder=\"trans('reception.visitor_name')\">\n                    <show-error :form-name=\"visitorLogForm\" prop-name=\"name\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <div class=\"radio radio-success m-t-20\">\n                        <div class=\"row\">\n                            <div class=\"col-6\">\n                                <input type=\"radio\" value=\"parent\" id=\"type_parent\" v-model=\"visitorLogForm.type\" :checked=\"visitorLogForm.type == 'parent'\" name=\"type\" @click=\"visitorLogForm.errors.clear('type')\">\n                                <label for=\"type_parent\">{{trans('reception.visitor_type_parent')}}</label>\n                            </div>\n                            <div class=\"col-6\">\n                                <input type=\"radio\" value=\"other\" id=\"type_other\" v-model=\"visitorLogForm.type\" :checked=\"visitorLogForm.type == 'other'\" name=\"type\" @click=\"visitorLogForm.errors.clear('type')\">\n                                <label for=\"type_other\">{{trans('reception.visitor_type_other')}}</label>\n                            </div>\n                        </div>\n                    </div>\n                    <show-error :form-name=\"visitorLogForm\" prop-name=\"type\"></show-error>\n                </div>\n            </div>\n            <template v-if=\"visitorLogForm.type == 'parent'\">\n                <div class=\"col-12 col-sm-3\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('student.student')}}</label>\n                        <v-select label=\"name\" v-model=\"selected_student\" name=\"student_id\" id=\"student_id\" :options=\"students\" :placeholder=\"trans('student.select_student')\" @select=\"onStudentSelect\" @close=\"visitorLogForm.errors.clear('student_id')\" @remove=\"visitorLogForm.student_id = ''\">\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!students.length\">\n                                {{trans('general.no_option_found')}}\n                            </div>\n                        </v-select>\n                        <show-error :form-name=\"visitorLogForm\" prop-name=\"student_id\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-3\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('reception.relation_with_student')}}</label>\n                        <input class=\"form-control\" type=\"text\" v-model=\"visitorLogForm.relation_with_student\" name=\"relation_with_student\" :placeholder=\"trans('reception.relation_with_student')\">\n                        <show-error :form-name=\"visitorLogForm\" prop-name=\"relation_with_student\"></show-error>\n                    </div>\n                </div>\n            </template>\n            <template v-if=\"visitorLogForm.type == 'other'\">\n\t            <div class=\"col-12 col-sm-3\">\n\t                <div class=\"form-group\">\n\t                    <label for=\"\">{{trans('reception.visitor_company_name')}}</label>\n\t                    <input class=\"form-control\" type=\"text\" v-model=\"visitorLogForm.company_name\" name=\"company_name\" :placeholder=\"trans('reception.visitor_company_name')\">\n\t                    <show-error :form-name=\"visitorLogForm\" prop-name=\"company_name\"></show-error>\n\t                </div>\n\t            </div>\n\t            <div class=\"col-12 col-sm-3\">\n\t                <div class=\"form-group\">\n\t                    <label for=\"\">{{trans('reception.visitor_contact_number')}}</label>\n\t                    <input class=\"form-control\" type=\"text\" v-model=\"visitorLogForm.contact_number\" name=\"contact_number\" :placeholder=\"trans('reception.visitor_contact_number')\">\n\t                    <show-error :form-name=\"visitorLogForm\" prop-name=\"contact_number\"></show-error>\n\t                </div>\n\t            </div>\n\t            <div class=\"col-12 col-sm-3\">\n\t                <div class=\"form-group\">\n\t                    <label for=\"\">{{trans('reception.visitor_address')}}</label>\n\t                    <autosize-textarea v-model=\"visitorLogForm.address\" rows=\"1\" name=\"addres\" :placeholder=\"trans('reception.visitor_address')\"></autosize-textarea>\n\t                    <show-error :form-name=\"visitorLogForm\" prop-name=\"address\"></show-error>\n\t                </div>\n\t            </div>\n\t        </template>\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.visitor_count')}}</label>\n\t                   <input class=\"form-control\" type=\"text\" v-model=\"visitorLogForm.visitor_count\" name=\"visitor_count\" :placeholder=\"trans('reception.visitor_count')\">\n                    <show-error :form-name=\"visitorLogForm\" prop-name=\"visitor_count\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.visiting_purpose')}}</label>\n                    <v-select label=\"name\" v-model=\"selected_visiting_purpose\" name=\"visiting_purpose_id\" id=\"visiting_purpose_id\" :options=\"visiting_purposes\" :placeholder=\"trans('reception.select_visiting_purpose')\" @select=\"onVisitingPurposeSelect\" @close=\"visitorLogForm.errors.clear('visiting_purpose_id')\" @remove=\"visitorLogForm.visiting_purpose_id = ''\">\n                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!visiting_purposes.length\">\n                            {{trans('general.no_option_found')}}\n                        </div>\n                    </v-select>\n                    <show-error :form-name=\"visitorLogForm\" prop-name=\"visiting_purpose_id\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.whom_to_meet')}}</label>\n                    <v-select label=\"name\" v-model=\"selected_employee\" name=\"employee_id\" id=\"employee_id\" :options=\"employees\" :placeholder=\"trans('employee.select_employee')\" @select=\"onEmployeeSelect\" @close=\"visitorLogForm.errors.clear('employee_id')\" @remove=\"visitorLogForm.employee_id = ''\">\n                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!employees.length\">\n                            {{trans('general.no_option_found')}}\n                        </div>\n                    </v-select>\n                    <show-error :form-name=\"visitorLogForm\" prop-name=\"employee_id\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.date_of_visit')}}</label>\n                    <datepicker v-model=\"visitorLogForm.date_of_visit\" :bootstrapStyling=\"true\" @selected=\"visitorLogForm.errors.clear('date_of_visit')\" :placeholder=\"trans('reception.date_of_visit')\"></datepicker>\n                    <show-error :form-name=\"visitorLogForm\" prop-name=\"date_of_visit\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\" v-if=\"loaded\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.entry_time')}}</label>\n                    <timepicker :hour.sync=\"entry_time.hour\" :minute.sync=\"entry_time.minute\" :meridiem.sync=\"entry_time.meridiem\"></timepicker>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\" v-if=\"uuid\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.exit_time')}}</label>\n                    <timepicker :hour.sync=\"exit_time.hour\" :minute.sync=\"exit_time.minute\" :meridiem.sync=\"exit_time.meridiem\"></timepicker>\n                </div>\n            </div>\n            <div class=\"col-12\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.visitor_remarks')}}</label>\n                    <autosize-textarea v-model=\"visitorLogForm.remarks\" rows=\"1\" name=\"remarks\" :placeholder=\"trans('reception.visitor_remarks')\"></autosize-textarea>\n                    <show-error :form-name=\"visitorLogForm\" prop-name=\"remarks\"></show-error>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-footer text-right\">\n            <router-link to=\"/reception/visitor/log\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"uuid\">{{trans('general.cancel')}}</router-link>\n            <button v-if=\"!uuid\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\n            <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\n                <span v-if=\"uuid\">{{trans('general.update')}}</span>\n                <span v-else>{{trans('general.save')}}</span>\n            </button>\n        </div>\n    </form>\t\n</template>\n\n<script>\n    export default {\n        components: {},\n        data() {\n            return {\n                visitorLogForm: new Form({\n                    name: '',\n                    company_name: '',\n                    relation_with_student: '',\n                    contact_number: '',\n                    address: '',\n                    type: 'parent',\n                    student_id: '',\n                    visiting_purpose_id: '',\n                    employee_id: '',\n                    visitor_count: 1,\n                    date_of_visit: '',\n                    entry_time: '',\n                    exit_time: '',\n                    remarks: ''\n                }),\n                loaded: false,\n                entry_time: {\n                    hour: '',\n                    minute: '',\n                    meridiem: 'am'\n                },\n                exit_time: {\n                \thour: '',\n                \tminute: '',\n                \tmeridiem: ''\n                },\n                visiting_purposes: [],\n                selected_visiting_purpose: null,\n                students: [],\n                selected_student: null,\n                employees: [],\n                selected_employee: null\n            };\n        },\n        props: ['uuid'],\n        mounted() {\n            if(!helper.hasPermission('create-visitor-log') && !helper.hasPermission('edit-visitor-log')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            if(this.uuid)\n                this.get();\n\n            this.getPreRequisite();\n        },\n        methods: {\n            timePadding(time){\n                return helper.formatWithPadding(time,2);\n            },\n            proceed(){\n                if(this.uuid)\n                    this.update();\n                else\n                    this.store();\n            },\n            getPreRequisite(){\n                let loader = this.$loading.show();\n                axios.get('/api/visitor/log/pre-requisite')\n                    .then(response => {\n                        this.visiting_purposes = response.visiting_purposes;\n                        this.students = response.students;\n                        this.employees = response.employees;\n                        this.visitorLogForm.date_of_visit = helper.today();\n                        if(!this.uuid)\n                            this.loaded = true;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },  \n            store(){\n            \tthis.visitorLogForm.entry_time = (this.entry_time.hour && this.entry_time.minute) ? helper.formatWithPadding(this.entry_time.hour,2)+':'+helper.formatWithPadding(this.entry_time.minute,2)+' '+this.entry_time.meridiem : '';\n                let loader = this.$loading.show();\n                this.visitorLogForm.post('/api/visitor/log')\n                    .then(response => {\n                        toastr.success(response.message);\n                        this.selected_visiting_purpose = null;\n                        this.selected_student = null;\n                        this.selected_employee = null;\n                        this.entry_time.hour = '';\n                        this.entry_time.minute = '';\n                        this.entry_time.meridiem = 'am';\n                        this.visitorLogForm.type = 'parent';\n                        this.$emit('completed');\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            get(){\n                let loader = this.$loading.show();\n                axios.get('/api/visitor/log/'+this.uuid)\n                    .then(response => {\n                        this.visitorLogForm.type = response.visitor_log.type;\n                        this.visitorLogForm.name = response.visitor_log.name;\n                        this.visitorLogForm.company_name = response.visitor_log.company_name;\n                        this.visitorLogForm.contact_number = response.visitor_log.contact_number;\n                        this.visitorLogForm.address = response.visitor_log.address;\n                        this.visitorLogForm.student_id = response.visitor_log.student_id;\n                        this.selected_student = response.selected_student;\n                        this.visitorLogForm.relation_with_student = response.visitor_log.relation_with_student;\n                        this.visitorLogForm.visiting_purpose_id = response.visitor_log.visiting_purpose_id;\n                        this.selected_visiting_purpose = response.selected_visiting_purpose;\n                        this.visitorLogForm.employee_id = response.visitor_log.employee_id;\n                        this.selected_employee = response.selected_employee;\n                        this.visitorLogForm.remarks = response.visitor_log.remarks;\n                        this.visitorLogForm.date_of_visit = response.visitor_log.date_of_visit;\n                        this.entry_time.hour = response.entry_time.hour;\n                        this.entry_time.minute = response.entry_time.minute;\n                        this.entry_time.meridiem = response.entry_time.meridiem;\n                        if (response.visitor_log.exit_time) {\n                            this.exit_time.hour = response.exit_time.hour;\n                            this.exit_time.minute = response.exit_time.minute;\n                            this.exit_time.meridiem = response.exit_time.meridiem;\n                        }\n                        this.loaded = true;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                        this.$router.push('/reception/visitor/log');\n                    });\n            },\n            update(){\n            \tthis.visitorLogForm.entry_time = (this.entry_time.hour && this.entry_time.minute) ? helper.formatWithPadding(this.entry_time.hour,2)+':'+helper.formatWithPadding(this.entry_time.minute,2)+' '+this.entry_time.meridiem : '';\n            \tthis.visitorLogForm.exit_time = (this.exit_time.hour && this.exit_time.minute) ? helper.formatWithPadding(this.exit_time.hour,2)+':'+helper.formatWithPadding(this.exit_time.minute,2)+' '+this.exit_time.meridiem : '';\n                let loader = this.$loading.show();\n                this.visitorLogForm.patch('/api/visitor/log/'+this.uuid)\n                    .then(response => {\n                        toastr.success(response.message);\n                        loader.hide();\n                        this.$router.push('/reception/visitor/log');\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            onVisitingPurposeSelect(selectedOption){\n                return this.visitorLogForm.visiting_purpose_id = selectedOption.id;\n            },\n            onStudentSelect(selectedOption){\n                return this.visitorLogForm.student_id = selectedOption.id;\n            },\n            onEmployeeSelect(selectedOption){\n                return this.visitorLogForm.employee_id = selectedOption.id;\n            }\n        }\n    }\n</script>","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"form\",\n    {\n      on: {\n        submit: function ($event) {\n          $event.preventDefault()\n          return _vm.proceed.apply(null, arguments)\n        },\n        keydown: function ($event) {\n          return _vm.visitorLogForm.errors.clear($event.target.name)\n        },\n      },\n    },\n    [\n      _c(\n        \"div\",\n        { staticClass: \"row\" },\n        [\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"reception.visitor_name\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.visitorLogForm.name,\n                      expression: \"visitorLogForm.name\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"name\",\n                    placeholder: _vm.trans(\"reception.visitor_name\"),\n                  },\n                  domProps: { value: _vm.visitorLogForm.name },\n                  on: {\n                    input: function ($event) {\n                      if ($event.target.composing) return\n                      _vm.$set(_vm.visitorLogForm, \"name\", $event.target.value)\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.visitorLogForm,\n                    \"prop-name\": \"name\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"div\", { staticClass: \"radio radio-success m-t-20\" }, [\n                  _c(\"div\", { staticClass: \"row\" }, [\n                    _c(\"div\", { staticClass: \"col-6\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.visitorLogForm.type,\n                            expression: \"visitorLogForm.type\",\n                          },\n                        ],\n                        attrs: {\n                          type: \"radio\",\n                          value: \"parent\",\n                          id: \"type_parent\",\n                          name: \"type\",\n                        },\n                        domProps: {\n                          checked: _vm.visitorLogForm.type == \"parent\",\n                          checked: _vm._q(_vm.visitorLogForm.type, \"parent\"),\n                        },\n                        on: {\n                          click: function ($event) {\n                            return _vm.visitorLogForm.errors.clear(\"type\")\n                          },\n                          change: function ($event) {\n                            return _vm.$set(\n                              _vm.visitorLogForm,\n                              \"type\",\n                              \"parent\"\n                            )\n                          },\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"label\", { attrs: { for: \"type_parent\" } }, [\n                        _vm._v(\n                          _vm._s(_vm.trans(\"reception.visitor_type_parent\"))\n                        ),\n                      ]),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"div\", { staticClass: \"col-6\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.visitorLogForm.type,\n                            expression: \"visitorLogForm.type\",\n                          },\n                        ],\n                        attrs: {\n                          type: \"radio\",\n                          value: \"other\",\n                          id: \"type_other\",\n                          name: \"type\",\n                        },\n                        domProps: {\n                          checked: _vm.visitorLogForm.type == \"other\",\n                          checked: _vm._q(_vm.visitorLogForm.type, \"other\"),\n                        },\n                        on: {\n                          click: function ($event) {\n                            return _vm.visitorLogForm.errors.clear(\"type\")\n                          },\n                          change: function ($event) {\n                            return _vm.$set(_vm.visitorLogForm, \"type\", \"other\")\n                          },\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"label\", { attrs: { for: \"type_other\" } }, [\n                        _vm._v(\n                          _vm._s(_vm.trans(\"reception.visitor_type_other\"))\n                        ),\n                      ]),\n                    ]),\n                  ]),\n                ]),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.visitorLogForm,\n                    \"prop-name\": \"type\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _vm.visitorLogForm.type == \"parent\"\n            ? [\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"student.student\"))),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"v-select\",\n                        {\n                          attrs: {\n                            label: \"name\",\n                            name: \"student_id\",\n                            id: \"student_id\",\n                            options: _vm.students,\n                            placeholder: _vm.trans(\"student.select_student\"),\n                          },\n                          on: {\n                            select: _vm.onStudentSelect,\n                            close: function ($event) {\n                              return _vm.visitorLogForm.errors.clear(\n                                \"student_id\"\n                              )\n                            },\n                            remove: function ($event) {\n                              _vm.visitorLogForm.student_id = \"\"\n                            },\n                          },\n                          model: {\n                            value: _vm.selected_student,\n                            callback: function ($$v) {\n                              _vm.selected_student = $$v\n                            },\n                            expression: \"selected_student\",\n                          },\n                        },\n                        [\n                          !_vm.students.length\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"multiselect__option\",\n                                  attrs: { slot: \"afterList\" },\n                                  slot: \"afterList\",\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n                                \" +\n                                      _vm._s(\n                                        _vm.trans(\"general.no_option_found\")\n                                      ) +\n                                      \"\\n                            \"\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.visitorLogForm,\n                          \"prop-name\": \"student_id\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(\n                          _vm._s(_vm.trans(\"reception.relation_with_student\"))\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.visitorLogForm.relation_with_student,\n                            expression: \"visitorLogForm.relation_with_student\",\n                          },\n                        ],\n                        staticClass: \"form-control\",\n                        attrs: {\n                          type: \"text\",\n                          name: \"relation_with_student\",\n                          placeholder: _vm.trans(\n                            \"reception.relation_with_student\"\n                          ),\n                        },\n                        domProps: {\n                          value: _vm.visitorLogForm.relation_with_student,\n                        },\n                        on: {\n                          input: function ($event) {\n                            if ($event.target.composing) return\n                            _vm.$set(\n                              _vm.visitorLogForm,\n                              \"relation_with_student\",\n                              $event.target.value\n                            )\n                          },\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.visitorLogForm,\n                          \"prop-name\": \"relation_with_student\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n              ]\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.visitorLogForm.type == \"other\"\n            ? [\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(\n                          _vm._s(_vm.trans(\"reception.visitor_company_name\"))\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.visitorLogForm.company_name,\n                            expression: \"visitorLogForm.company_name\",\n                          },\n                        ],\n                        staticClass: \"form-control\",\n                        attrs: {\n                          type: \"text\",\n                          name: \"company_name\",\n                          placeholder: _vm.trans(\n                            \"reception.visitor_company_name\"\n                          ),\n                        },\n                        domProps: { value: _vm.visitorLogForm.company_name },\n                        on: {\n                          input: function ($event) {\n                            if ($event.target.composing) return\n                            _vm.$set(\n                              _vm.visitorLogForm,\n                              \"company_name\",\n                              $event.target.value\n                            )\n                          },\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.visitorLogForm,\n                          \"prop-name\": \"company_name\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(\n                          _vm._s(_vm.trans(\"reception.visitor_contact_number\"))\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.visitorLogForm.contact_number,\n                            expression: \"visitorLogForm.contact_number\",\n                          },\n                        ],\n                        staticClass: \"form-control\",\n                        attrs: {\n                          type: \"text\",\n                          name: \"contact_number\",\n                          placeholder: _vm.trans(\n                            \"reception.visitor_contact_number\"\n                          ),\n                        },\n                        domProps: { value: _vm.visitorLogForm.contact_number },\n                        on: {\n                          input: function ($event) {\n                            if ($event.target.composing) return\n                            _vm.$set(\n                              _vm.visitorLogForm,\n                              \"contact_number\",\n                              $event.target.value\n                            )\n                          },\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.visitorLogForm,\n                          \"prop-name\": \"contact_number\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"reception.visitor_address\"))),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"autosize-textarea\", {\n                        attrs: {\n                          rows: \"1\",\n                          name: \"addres\",\n                          placeholder: _vm.trans(\"reception.visitor_address\"),\n                        },\n                        model: {\n                          value: _vm.visitorLogForm.address,\n                          callback: function ($$v) {\n                            _vm.$set(_vm.visitorLogForm, \"address\", $$v)\n                          },\n                          expression: \"visitorLogForm.address\",\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.visitorLogForm,\n                          \"prop-name\": \"address\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n              ]\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"reception.visitor_count\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.visitorLogForm.visitor_count,\n                      expression: \"visitorLogForm.visitor_count\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"visitor_count\",\n                    placeholder: _vm.trans(\"reception.visitor_count\"),\n                  },\n                  domProps: { value: _vm.visitorLogForm.visitor_count },\n                  on: {\n                    input: function ($event) {\n                      if ($event.target.composing) return\n                      _vm.$set(\n                        _vm.visitorLogForm,\n                        \"visitor_count\",\n                        $event.target.value\n                      )\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.visitorLogForm,\n                    \"prop-name\": \"visitor_count\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"reception.visiting_purpose\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"v-select\",\n                  {\n                    attrs: {\n                      label: \"name\",\n                      name: \"visiting_purpose_id\",\n                      id: \"visiting_purpose_id\",\n                      options: _vm.visiting_purposes,\n                      placeholder: _vm.trans(\n                        \"reception.select_visiting_purpose\"\n                      ),\n                    },\n                    on: {\n                      select: _vm.onVisitingPurposeSelect,\n                      close: function ($event) {\n                        return _vm.visitorLogForm.errors.clear(\n                          \"visiting_purpose_id\"\n                        )\n                      },\n                      remove: function ($event) {\n                        _vm.visitorLogForm.visiting_purpose_id = \"\"\n                      },\n                    },\n                    model: {\n                      value: _vm.selected_visiting_purpose,\n                      callback: function ($$v) {\n                        _vm.selected_visiting_purpose = $$v\n                      },\n                      expression: \"selected_visiting_purpose\",\n                    },\n                  },\n                  [\n                    !_vm.visiting_purposes.length\n                      ? _c(\n                          \"div\",\n                          {\n                            staticClass: \"multiselect__option\",\n                            attrs: { slot: \"afterList\" },\n                            slot: \"afterList\",\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            \" +\n                                _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                \"\\n                        \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ]\n                ),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.visitorLogForm,\n                    \"prop-name\": \"visiting_purpose_id\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"reception.whom_to_meet\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"v-select\",\n                  {\n                    attrs: {\n                      label: \"name\",\n                      name: \"employee_id\",\n                      id: \"employee_id\",\n                      options: _vm.employees,\n                      placeholder: _vm.trans(\"employee.select_employee\"),\n                    },\n                    on: {\n                      select: _vm.onEmployeeSelect,\n                      close: function ($event) {\n                        return _vm.visitorLogForm.errors.clear(\"employee_id\")\n                      },\n                      remove: function ($event) {\n                        _vm.visitorLogForm.employee_id = \"\"\n                      },\n                    },\n                    model: {\n                      value: _vm.selected_employee,\n                      callback: function ($$v) {\n                        _vm.selected_employee = $$v\n                      },\n                      expression: \"selected_employee\",\n                    },\n                  },\n                  [\n                    !_vm.employees.length\n                      ? _c(\n                          \"div\",\n                          {\n                            staticClass: \"multiselect__option\",\n                            attrs: { slot: \"afterList\" },\n                            slot: \"afterList\",\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            \" +\n                                _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                \"\\n                        \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ]\n                ),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.visitorLogForm,\n                    \"prop-name\": \"employee_id\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"reception.date_of_visit\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"datepicker\", {\n                  attrs: {\n                    bootstrapStyling: true,\n                    placeholder: _vm.trans(\"reception.date_of_visit\"),\n                  },\n                  on: {\n                    selected: function ($event) {\n                      return _vm.visitorLogForm.errors.clear(\"date_of_visit\")\n                    },\n                  },\n                  model: {\n                    value: _vm.visitorLogForm.date_of_visit,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.visitorLogForm, \"date_of_visit\", $$v)\n                    },\n                    expression: \"visitorLogForm.date_of_visit\",\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.visitorLogForm,\n                    \"prop-name\": \"date_of_visit\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _vm.loaded\n            ? _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  [\n                    _c(\"label\", { attrs: { for: \"\" } }, [\n                      _vm._v(_vm._s(_vm.trans(\"reception.entry_time\"))),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"timepicker\", {\n                      attrs: {\n                        hour: _vm.entry_time.hour,\n                        minute: _vm.entry_time.minute,\n                        meridiem: _vm.entry_time.meridiem,\n                      },\n                      on: {\n                        \"update:hour\": function ($event) {\n                          return _vm.$set(_vm.entry_time, \"hour\", $event)\n                        },\n                        \"update:minute\": function ($event) {\n                          return _vm.$set(_vm.entry_time, \"minute\", $event)\n                        },\n                        \"update:meridiem\": function ($event) {\n                          return _vm.$set(_vm.entry_time, \"meridiem\", $event)\n                        },\n                      },\n                    }),\n                  ],\n                  1\n                ),\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.uuid\n            ? _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  [\n                    _c(\"label\", { attrs: { for: \"\" } }, [\n                      _vm._v(_vm._s(_vm.trans(\"reception.exit_time\"))),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"timepicker\", {\n                      attrs: {\n                        hour: _vm.exit_time.hour,\n                        minute: _vm.exit_time.minute,\n                        meridiem: _vm.exit_time.meridiem,\n                      },\n                      on: {\n                        \"update:hour\": function ($event) {\n                          return _vm.$set(_vm.exit_time, \"hour\", $event)\n                        },\n                        \"update:minute\": function ($event) {\n                          return _vm.$set(_vm.exit_time, \"minute\", $event)\n                        },\n                        \"update:meridiem\": function ($event) {\n                          return _vm.$set(_vm.exit_time, \"meridiem\", $event)\n                        },\n                      },\n                    }),\n                  ],\n                  1\n                ),\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"reception.visitor_remarks\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"autosize-textarea\", {\n                  attrs: {\n                    rows: \"1\",\n                    name: \"remarks\",\n                    placeholder: _vm.trans(\"reception.visitor_remarks\"),\n                  },\n                  model: {\n                    value: _vm.visitorLogForm.remarks,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.visitorLogForm, \"remarks\", $$v)\n                    },\n                    expression: \"visitorLogForm.remarks\",\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.visitorLogForm,\n                    \"prop-name\": \"remarks\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n        ],\n        2\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"card-footer text-right\" },\n        [\n          _c(\n            \"router-link\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.uuid,\n                  expression: \"uuid\",\n                },\n              ],\n              staticClass: \"btn btn-danger waves-effect waves-light\",\n              attrs: { to: \"/reception/visitor/log\" },\n            },\n            [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n          ),\n          _vm._v(\" \"),\n          !_vm.uuid\n            ? _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { type: \"button\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.$emit(\"cancel\")\n                    },\n                  },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"button\",\n            {\n              staticClass: \"btn btn-info waves-effect waves-light\",\n              attrs: { type: \"submit\" },\n            },\n            [\n              _vm.uuid\n                ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n            ]\n          ),\n        ],\n        1\n      ),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=157ab0a6&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"C:\\\\Users\\\\admin\\\\Desktop\\\\BULK\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('157ab0a6')) {\n      api.createRecord('157ab0a6', component.options)\n    } else {\n      api.reload('157ab0a6', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=157ab0a6&\", function () {\n      api.rerender('157ab0a6', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/reception/visitor-log/form.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=157ab0a6&\""],"mappings":";;;;;;;;;;AA2IA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1SA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAEA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAOA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;;;;;;;;;;;;;ACzzBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAiBA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}
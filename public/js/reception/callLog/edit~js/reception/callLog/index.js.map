{"version":3,"file":"js/reception/callLog/edit~js/reception/callLog/index.js?id=b7f5ba1d0395c19344ab","sources":["webpack:///resources/js/views/reception/call-log/form.vue","webpack:///./resources/js/views/reception/call-log/form.vue","webpack:///./resources/js/views/reception/call-log/form.vue?d355","webpack:///./resources/js/views/reception/call-log/form.vue?efb9","webpack:///./resources/js/views/reception/call-log/form.vue?fe76"],"sourcesContent":["<template>\n    <form @submit.prevent=\"proceed\" @keydown=\"callLogForm.errors.clear($event.target.name)\">\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.calling_purpose')}}</label>\n                    <v-select label=\"name\" v-model=\"selected_calling_purpose\" name=\"calling_purpose_id\" id=\"calling_purpose_id\" :options=\"calling_purposes\" :placeholder=\"trans('reception.select_calling_purpose')\" @select=\"onCallingPurposeSelect\" @close=\"callLogForm.errors.clear('calling_purpose_id')\" @remove=\"callLogForm.calling_purpose_id = ''\">\n                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!calling_purposes.length\">\n                            {{trans('general.no_option_found')}}\n                        </div>\n                    </v-select>\n                    <show-error :form-name=\"callLogForm\" prop-name=\"calling_purpose_id\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.call_type')}}</label>\n                    <select v-model=\"callLogForm.type\" class=\"custom-select col-12\" @select=\"callLogForm.errors.clear('type')\">\n                      <option value=\"outgoing\">{{trans('reception.call_type_outgoing')}}</option>\n                      <option value=\"incoming\">{{trans('reception.call_type_incoming')}}</option>\n                    </select>\n                    <show-error :form-name=\"callLogForm\" prop-name=\"type\"></show-error>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.call_log_name')}}</label>\n                    <input class=\"form-control\" type=\"text\" v-model=\"callLogForm.name\" name=\"name\" :placeholder=\"trans('reception.call_log_name')\">\n                    <show-error :form-name=\"callLogForm\" prop-name=\"name\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.call_log_incoming_number')}}</label>\n                    <input class=\"form-control\" type=\"text\" v-model=\"callLogForm.incoming_number\" name=\"incoming_number\" :placeholder=\"trans('reception.call_log_incoming_number')\">\n                    <show-error :form-name=\"callLogForm\" prop-name=\"incoming_number\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.call_log_outgoing_number')}}</label>\n                    <input class=\"form-control\" type=\"text\" v-model=\"callLogForm.outgoing_number\" name=\"outgoing_number\" :placeholder=\"trans('reception.call_log_outgoing_number')\">\n                    <show-error :form-name=\"callLogForm\" prop-name=\"outgoing_number\"></show-error>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-4\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.date')}}</label>\n                    <datepicker v-model=\"callLogForm.date\" :bootstrapStyling=\"true\" @selected=\"callLogForm.errors.clear('date')\" :placeholder=\"trans('reception.date')\"></datepicker>\n                    <show-error :form-name=\"callLogForm\" prop-name=\"date\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-4\" v-if=\"loaded\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.start_time')}}</label>\n                    <timepicker :hour.sync=\"start_time.hour\" :minute.sync=\"start_time.minute\" :meridiem.sync=\"start_time.meridiem\"></timepicker>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-4\" v-if=\"loaded\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.end_time')}}</label>\n                    <timepicker :hour.sync=\"end_time.hour\" :minute.sync=\"end_time.minute\" :meridiem.sync=\"end_time.meridiem\"></timepicker>\n                </div>\n            </div>\n            <div class=\"col-12\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.call_log_description')}}</label>\n                    <autosize-textarea v-model=\"callLogForm.description\" rows=\"1\" name=\"description\" :placeholder=\"trans('reception.call_log_description')\"></autosize-textarea>\n                    <show-error :form-name=\"callLogForm\" prop-name=\"description\"></show-error>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-footer text-right\">\n            <router-link to=\"/reception/call/log\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"uuid\">{{trans('general.cancel')}}</router-link>\n            <button v-if=\"!uuid\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\n            <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\n                <span v-if=\"uuid\">{{trans('general.update')}}</span>\n                <span v-else>{{trans('general.save')}}</span>\n            </button>\n        </div>\n    </form>\t\n</template>\n\n<script>\n    export default {\n        components: {},\n        data() {\n            return {\n                callLogForm: new Form({\n                    name: '',\n                    incoming_number: '',\n                    outgoing_number: '',\n                    type: 'outgoing',\n                    calling_purpose_id: '',\n                    date: '',\n                    start_time: '',\n                    end_time: '',\n                    description: ''\n                }),\n                loaded: false,\n                start_time: {\n                    hour: '',\n                    minute: '',\n                    meridiem: 'am'\n                },\n                end_time: {\n                \thour: '',\n                \tminute: '',\n                \tmeridiem: 'am'\n                },\n                calling_purposes: [],\n                selected_calling_purpose: null\n            };\n        },\n        props: ['uuid'],\n        mounted() {\n            if(!helper.hasPermission('create-call-log') && !helper.hasPermission('edit-call-log')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            this.getPreRequisite();\n        },\n        methods: {\n            timePadding(time){\n                return helper.formatWithPadding(time,2);\n            },\n            proceed(){\n                if(this.uuid)\n                    this.update();\n                else\n                    this.store();\n            },\n            getPreRequisite(){\n                let loader = this.$loading.show();\n                axios.get('/api/call/log/pre-requisite')\n                    .then(response => {\n                        this.calling_purposes = response.calling_purposes;\n                        this.callLogForm.date = helper.today();\n                        if(!this.uuid)\n                            this.loaded = true;\n\n                        if(this.uuid)\n                            this.get();\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },  \n            store(){\n            \tthis.callLogForm.start_time = (this.start_time.hour && this.start_time.minute) ? helper.formatWithPadding(this.start_time.hour,2)+':'+helper.formatWithPadding(this.start_time.minute,2)+' '+this.start_time.meridiem : '';\n                this.callLogForm.end_time = (this.end_time.hour && this.end_time.minute) ? helper.formatWithPadding(this.end_time.hour,2)+':'+helper.formatWithPadding(this.end_time.minute,2)+' '+this.end_time.meridiem : '';\n                let loader = this.$loading.show();\n                this.callLogForm.post('/api/call/log')\n                    .then(response => {\n                        toastr.success(response.message);\n                        this.selected_calling_purpose = null;\n                        this.start_time.hour = '';\n                        this.start_time.minute = '';\n                        this.start_time.meridiem = 'am';\n                        this.end_time.hour = '';\n                        this.end_time.minute = '';\n                        this.end_time.meridiem = 'am';\n                        this.callLogForm.type = 'outgoing';\n                        this.$emit('completed');\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            get(){\n                let loader = this.$loading.show();\n                axios.get('/api/call/log/'+this.uuid)\n                    .then(response => {\n                        this.callLogForm.type = response.call_log.type;\n                        this.callLogForm.name = response.call_log.name;\n                        this.callLogForm.incoming_number = response.call_log.incoming_number;\n                        this.callLogForm.outgoing_number = response.call_log.outgoing_number;\n                        this.callLogForm.calling_purpose_id = response.call_log.calling_purpose_id;\n                        this.selected_calling_purpose = response.selected_calling_purpose;\n                        this.callLogForm.description = response.call_log.description;\n                        this.callLogForm.date = response.call_log.date;\n                        this.start_time.hour = response.start_time.hour;\n                        this.start_time.minute = response.start_time.minute;\n                        this.start_time.meridiem = response.start_time.meridiem;\n                        if (response.call_log.end_time) {\n                            this.end_time.hour = response.end_time.hour;\n                            this.end_time.minute = response.end_time.minute;\n                            this.end_time.meridiem = response.end_time.meridiem;\n                        }\n                        this.loaded = true;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                        this.$router.push('/reception/call/log');\n                    });\n            },\n            update(){\n            \tthis.callLogForm.start_time = (this.start_time.hour && this.start_time.minute) ? helper.formatWithPadding(this.start_time.hour,2)+':'+helper.formatWithPadding(this.start_time.minute,2)+' '+this.start_time.meridiem : '';\n            \tthis.callLogForm.end_time = (this.end_time.hour && this.end_time.minute) ? helper.formatWithPadding(this.end_time.hour,2)+':'+helper.formatWithPadding(this.end_time.minute,2)+' '+this.end_time.meridiem : '';\n                let loader = this.$loading.show();\n                this.callLogForm.patch('/api/call/log/'+this.uuid)\n                    .then(response => {\n                        toastr.success(response.message);\n                        loader.hide();\n                        this.$router.push('/reception/call/log');\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            onCallingPurposeSelect(selectedOption){\n                return this.callLogForm.calling_purpose_id = selectedOption.id;\n            }\n        }\n    }\n</script>","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"form\",\n    {\n      on: {\n        submit: function ($event) {\n          $event.preventDefault()\n          return _vm.proceed.apply(null, arguments)\n        },\n        keydown: function ($event) {\n          return _vm.callLogForm.errors.clear($event.target.name)\n        },\n      },\n    },\n    [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.calling_purpose\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"v-select\",\n                {\n                  attrs: {\n                    label: \"name\",\n                    name: \"calling_purpose_id\",\n                    id: \"calling_purpose_id\",\n                    options: _vm.calling_purposes,\n                    placeholder: _vm.trans(\"reception.select_calling_purpose\"),\n                  },\n                  on: {\n                    select: _vm.onCallingPurposeSelect,\n                    close: function ($event) {\n                      return _vm.callLogForm.errors.clear(\"calling_purpose_id\")\n                    },\n                    remove: function ($event) {\n                      _vm.callLogForm.calling_purpose_id = \"\"\n                    },\n                  },\n                  model: {\n                    value: _vm.selected_calling_purpose,\n                    callback: function ($$v) {\n                      _vm.selected_calling_purpose = $$v\n                    },\n                    expression: \"selected_calling_purpose\",\n                  },\n                },\n                [\n                  !_vm.calling_purposes.length\n                    ? _c(\n                        \"div\",\n                        {\n                          staticClass: \"multiselect__option\",\n                          attrs: { slot: \"afterList\" },\n                          slot: \"afterList\",\n                        },\n                        [\n                          _vm._v(\n                            \"\\n                        \" +\n                              _vm._s(_vm.trans(\"general.no_option_found\")) +\n                              \"\\n                    \"\n                          ),\n                        ]\n                      )\n                    : _vm._e(),\n                ]\n              ),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.callLogForm,\n                  \"prop-name\": \"calling_purpose_id\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.call_type\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.callLogForm.type,\n                      expression: \"callLogForm.type\",\n                    },\n                  ],\n                  staticClass: \"custom-select col-12\",\n                  on: {\n                    select: function ($event) {\n                      return _vm.callLogForm.errors.clear(\"type\")\n                    },\n                    change: function ($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function (o) {\n                          return o.selected\n                        })\n                        .map(function (o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.$set(\n                        _vm.callLogForm,\n                        \"type\",\n                        $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      )\n                    },\n                  },\n                },\n                [\n                  _c(\"option\", { attrs: { value: \"outgoing\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"reception.call_type_outgoing\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"option\", { attrs: { value: \"incoming\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"reception.call_type_incoming\"))),\n                  ]),\n                ]\n              ),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.callLogForm, \"prop-name\": \"type\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.call_log_name\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.callLogForm.name,\n                    expression: \"callLogForm.name\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"name\",\n                  placeholder: _vm.trans(\"reception.call_log_name\"),\n                },\n                domProps: { value: _vm.callLogForm.name },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(_vm.callLogForm, \"name\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.callLogForm, \"prop-name\": \"name\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.call_log_incoming_number\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.callLogForm.incoming_number,\n                    expression: \"callLogForm.incoming_number\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"incoming_number\",\n                  placeholder: _vm.trans(\"reception.call_log_incoming_number\"),\n                },\n                domProps: { value: _vm.callLogForm.incoming_number },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(\n                      _vm.callLogForm,\n                      \"incoming_number\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.callLogForm,\n                  \"prop-name\": \"incoming_number\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.call_log_outgoing_number\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.callLogForm.outgoing_number,\n                    expression: \"callLogForm.outgoing_number\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"outgoing_number\",\n                  placeholder: _vm.trans(\"reception.call_log_outgoing_number\"),\n                },\n                domProps: { value: _vm.callLogForm.outgoing_number },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(\n                      _vm.callLogForm,\n                      \"outgoing_number\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.callLogForm,\n                  \"prop-name\": \"outgoing_number\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.date\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"datepicker\", {\n                attrs: {\n                  bootstrapStyling: true,\n                  placeholder: _vm.trans(\"reception.date\"),\n                },\n                on: {\n                  selected: function ($event) {\n                    return _vm.callLogForm.errors.clear(\"date\")\n                  },\n                },\n                model: {\n                  value: _vm.callLogForm.date,\n                  callback: function ($$v) {\n                    _vm.$set(_vm.callLogForm, \"date\", $$v)\n                  },\n                  expression: \"callLogForm.date\",\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.callLogForm, \"prop-name\": \"date\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _vm.loaded\n          ? _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"reception.start_time\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"timepicker\", {\n                    attrs: {\n                      hour: _vm.start_time.hour,\n                      minute: _vm.start_time.minute,\n                      meridiem: _vm.start_time.meridiem,\n                    },\n                    on: {\n                      \"update:hour\": function ($event) {\n                        return _vm.$set(_vm.start_time, \"hour\", $event)\n                      },\n                      \"update:minute\": function ($event) {\n                        return _vm.$set(_vm.start_time, \"minute\", $event)\n                      },\n                      \"update:meridiem\": function ($event) {\n                        return _vm.$set(_vm.start_time, \"meridiem\", $event)\n                      },\n                    },\n                  }),\n                ],\n                1\n              ),\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.loaded\n          ? _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"reception.end_time\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"timepicker\", {\n                    attrs: {\n                      hour: _vm.end_time.hour,\n                      minute: _vm.end_time.minute,\n                      meridiem: _vm.end_time.meridiem,\n                    },\n                    on: {\n                      \"update:hour\": function ($event) {\n                        return _vm.$set(_vm.end_time, \"hour\", $event)\n                      },\n                      \"update:minute\": function ($event) {\n                        return _vm.$set(_vm.end_time, \"minute\", $event)\n                      },\n                      \"update:meridiem\": function ($event) {\n                        return _vm.$set(_vm.end_time, \"meridiem\", $event)\n                      },\n                    },\n                  }),\n                ],\n                1\n              ),\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.call_log_description\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"autosize-textarea\", {\n                attrs: {\n                  rows: \"1\",\n                  name: \"description\",\n                  placeholder: _vm.trans(\"reception.call_log_description\"),\n                },\n                model: {\n                  value: _vm.callLogForm.description,\n                  callback: function ($$v) {\n                    _vm.$set(_vm.callLogForm, \"description\", $$v)\n                  },\n                  expression: \"callLogForm.description\",\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.callLogForm,\n                  \"prop-name\": \"description\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"card-footer text-right\" },\n        [\n          _c(\n            \"router-link\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.uuid,\n                  expression: \"uuid\",\n                },\n              ],\n              staticClass: \"btn btn-danger waves-effect waves-light\",\n              attrs: { to: \"/reception/call/log\" },\n            },\n            [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n          ),\n          _vm._v(\" \"),\n          !_vm.uuid\n            ? _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { type: \"button\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.$emit(\"cancel\")\n                    },\n                  },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"button\",\n            {\n              staticClass: \"btn btn-info waves-effect waves-light\",\n              attrs: { type: \"submit\" },\n            },\n            [\n              _vm.uuid\n                ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n            ]\n          ),\n        ],\n        1\n      ),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=c25ea162&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"C:\\\\Users\\\\admin\\\\Desktop\\\\BULK\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('c25ea162')) {\n      api.createRecord('c25ea162', component.options)\n    } else {\n      api.reload('c25ea162', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=c25ea162&\", function () {\n      api.rerender('c25ea162', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/reception/call-log/form.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=c25ea162&\""],"mappings":";;;;;;;;;;AAyFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;;;;;;;;;;;;;ACteA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAiBA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}
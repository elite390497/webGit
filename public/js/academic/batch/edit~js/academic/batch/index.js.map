{"version":3,"file":"js/academic/batch/edit~js/academic/batch/index.js?id=70e6aeb289279fe9077d","sources":["webpack:///resources/js/views/academic/batch/form.vue","webpack:///./resources/js/views/academic/batch/form.vue","webpack:///./resources/js/views/academic/batch/form.vue?2393","webpack:///./resources/js/views/academic/batch/form.vue?9690","webpack:///./resources/js/views/academic/batch/form.vue?6a77"],"sourcesContent":["<template>\n    <form @submit.prevent=\"proceed\" @keydown=\"batchForm.errors.clear($event.target.name)\">\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-4\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('academic.batch_name')}}</label>\n                    <input class=\"form-control\" type=\"text\" v-model=\"batchForm.name\" name=\"name\" :placeholder=\"trans('academic.batch_name')\">\n                    <show-error :form-name=\"batchForm\" prop-name=\"name\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-4\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('academic.course')}}</label>\n                    <v-select label=\"name\" v-model=\"selected_course\" group-values=\"courses\" group-label=\"course_group\" :group-select=\"false\" name=\"course_id\" id=\"course_id\" :options=\"courses\" :placeholder=\"trans('academic.select_course')\" @select=\"onCourseSelect\" @close=\"batchForm.errors.clear('course_id')\" @remove=\"batchForm.course_id = ''\">\n                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!courses.length\">\n                            {{trans('general.no_option_found')}}\n                        </div>\n                    </v-select>\n                    <show-error :form-name=\"batchForm\" prop-name=\"course_id\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-4\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('academic.max_strength')}}</label>\n                    <input class=\"form-control\" type=\"text\" v-model=\"batchForm.max_strength\" name=\"max_strength\" :placeholder=\"trans('academic.max_strength')\">\n                    <show-error :form-name=\"batchForm\" prop-name=\"max_strength\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-4\">\n                <div class=\"row\">\n                    <div class=\"col-12 col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"\">{{trans('academic.roll_number_prefix')}}</label>\n                            <input class=\"form-control\" type=\"text\" v-model=\"batchForm.roll_number_prefix\" name=\"roll_number_prefix\" :placeholder=\"trans('academic.roll_number_prefix')\">\n                            <show-error :form-name=\"batchForm\" prop-name=\"roll_number_prefix\"></show-error>\n                        </div>\n                    </div>\n                    <div class=\"col-12 col-sm-6\">\n                        <div class=\"form-group\">\n                            <label for=\"\">{{trans('academic.roll_number_digit')}}</label>\n                            <input class=\"form-control\" type=\"text\" v-model=\"batchForm.roll_number_digit\" name=\"roll_number_digit\" :placeholder=\"trans('academic.roll_number_digit')\">\n                            <show-error :form-name=\"batchForm\" prop-name=\"roll_number_digit\"></show-error>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-4\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('student.default_attendance_method')}}</label>\n                    <select v-model=\"batchForm.default_attendance_method\" class=\"custom-select col-12\" name=\"default_attendance_method\">\n                      <option value=\"\" selected>{{trans('general.select_one')}}</option>\n                      <option v-for=\"option in attendance_methods\" v-bind:value=\"option.value\">\n                        {{ option.text }}\n                      </option>\n                    </select>\n                    <show-error :form-name=\"batchForm\" prop-name=\"default_attendance_method\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-4\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('academic.batch_description')}}</label>\n                    <autosize-textarea v-model=\"batchForm.description\" rows=\"1\" name=\"description\" :placeholder=\"trans('academic.batch_description')\"></autosize-textarea>\n                    <show-error :form-name=\"batchForm\" prop-name=\"description\"></show-error>\n                </div>\n            </div>\n        </div>\n\n        <template v-if=\"exam_observations.length\">\n            <h4 class=\"card-title\">{{trans('exam.configuration')}}</h4>\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-4\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.grade')}} ({{trans('exam.observation')}})</label>\n                        <v-select label=\"name\" v-model=\"selected_exam_grade\" name=\"exam_grade_id\" id=\"exam_grade_id\" :options=\"exam_grades\" :placeholder=\"trans('exam.select_grade')\" @select=\"onExamGradeSelect\" @close=\"batchForm.errors.clear('exam_grade_id')\" @remove=\"batchForm.exam_grade_id = ''\">\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exam_grades.length\">\n                                {{trans('general.no_option_found')}}\n                            </div>\n                        </v-select>\n                        <show-error :form-name=\"batchForm\" prop-name=\"exam_grade_id\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-4\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('exam.observation')}}</label>\n                        <v-select label=\"name\" v-model=\"selected_exam_observation\" name=\"exam_observation_id\" id=\"exam_observation_id\" :options=\"exam_observations\" :placeholder=\"trans('exam.select_observation')\" @select=\"onExamObservationSelect\" @close=\"batchForm.errors.clear('exam_observation_id')\" @remove=\"batchForm.exam_observation_id = ''\">\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exam_observations.length\">\n                                {{trans('general.no_option_found')}}\n                            </div>\n                        </v-select>\n                        <show-error :form-name=\"batchForm\" prop-name=\"exam_observation_id\"></show-error>\n                    </div>\n                </div>\n            </div>\n        </template>\n\n        <template v-if=\"id\">\n            <h4 class=\"card-title\">{{trans('calendar.holiday_configuration')}}</h4>\n            <p class=\"alert alert-info\">{{trans('academic.batch_holiday_except_date_tip')}}</p>\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-4\">\n                    <div class=\"form-group\">\n                        <datepicker v-model=\"holiday\" :bootstrapStyling=\"true\" @selected=\"onSelected\"></datepicker>\n                        <show-error :form-name=\"batchForm\" prop-name=\"dates\"></show-error>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-9\">\n                    <div class=\"form-group\">\n                        <span class=\"label label-info m-r-10 m-b-10 p-10\" v-for=\"date in batchForm.holidays_except\">\n                            {{date | momentWithDay}} <i class=\"fas fa-times-circle cursor\" v-tooltip=\"trans('general.remove')\" @click=\"remove(date)\"></i>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </template>\n        \n        <div class=\"card-footer text-right\">\n            <router-link to=\"/academic/batch\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"id\">{{trans('general.cancel')}}</router-link>\n            <button v-if=\"!id\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\n            <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\n                <span v-if=\"id\">{{trans('general.update')}}</span>\n                <span v-else>{{trans('general.save')}}</span>\n            </button>\n        </div>\n    </form>\n</template>\n\n\n<script>\n    export default {\n        components: {},\n        data() {\n            return {\n                batchForm: new Form({\n                    name: '',\n                    course_id: '',\n                    exam_grade_id: '',\n                    exam_observation_id: '',\n                    max_strength: '',\n                    roll_number_prefix: '',\n                    roll_number_digit: 0,\n                    default_attendance_method: '',\n                    description: '',\n                    holidays_except: []\n                }),\n                holiday: '',\n                attendance_methods: [],\n                courses: [],\n                selected_course: null,\n                exam_grades: [],\n                selected_exam_grade: null,\n                exam_observations: [],\n                selected_exam_observation: null\n            };\n        },\n        props: ['id'],\n        mounted() {\n            if(!helper.hasPermission('create-batch') && !helper.hasPermission('edit-batch')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            if(this.id)\n                this.get();\n\n            this.getPreRequisite();\n        },\n        methods: {\n            proceed(){\n                if(this.id)\n                    this.update();\n                else\n                    this.store();\n            },\n            getPreRequisite(){\n                let loader = this.$loading.show();\n                axios.get('/api/batch/pre-requisite')\n                    .then(response => {\n                        this.courses = response.courses;\n                        this.exam_grades = response.exam_grades;\n                        this.exam_observations = response.exam_observations;\n                        this.attendance_methods = response.attendance_methods;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },  \n            store(){\n                let loader = this.$loading.show();\n                this.batchForm.post('/api/batch')\n                    .then(response => {\n                        toastr.success(response.message);\n                        this.selected_course = null;\n                        this.$emit('completed');\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            get(){\n                let loader = this.$loading.show();\n                axios.get('/api/batch/'+this.id)\n                    .then(response => {\n                        this.batchForm.name = response.batch.name;\n                        this.batchForm.course_id = response.batch.course_id;\n                        this.batchForm.exam_grade_id = response.batch.exam_grade_id;\n                        this.selected_exam_grade = response.batch.exam_grade_id ? {id: response.batch.exam_grade_id, name: response.batch.grade.name} : null;\n                        this.batchForm.exam_observation_id = response.batch.exam_observation_id;\n                        this.selected_exam_observation = response.batch.exam_observation_id ? {id: response.batch.exam_observation_id, name: response.batch.observation.name} : null;\n                        this.batchForm.description = response.batch.description;\n                        this.batchForm.max_strength = response.batch.options ? response.batch.options.max_strength : helper.getConfig('default_max_strength_per_batch');\n                        this.batchForm.default_attendance_method = response.batch.options ? response.batch.options.default_attendance_method : '';\n                        this.batchForm.roll_number_prefix = response.batch.options ? response.batch.options.roll_number_prefix : helper.getConfig('default_roll_number_prefix');\n                        this.batchForm.roll_number_digit = response.batch.options && response.batch.options.hasOwnProperty('roll_number_digit') ? response.batch.options.roll_number_digit : 0,\n                        this.selected_course = response.selected_course;\n                        this.batchForm.holidays_except = response.batch.options.holidays_except || [];\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                        this.$router.push('/academic/batch');\n                    });\n            },\n            update(){\n                let loader = this.$loading.show();\n                this.batchForm.patch('/api/batch/'+this.id)\n                    .then(response => {\n                        toastr.success(response.message);\n                        loader.hide();\n                        this.batchForm.holidays_except = [];\n                        this.$router.push('/academic/batch');\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            onCourseSelect(selectedOption){\n                return this.batchForm.course_id = selectedOption.id;\n            },\n            onExamGradeSelect(selectedOption){\n                return this.batchForm.exam_grade_id = selectedOption.id;\n            },\n            onExamObservationSelect(selectedOption){\n                return this.batchForm.exam_observation_id = selectedOption.id;\n            },\n            onSelected(val){\n                this.holiday = '';\n                val = helper.toDate(val);\n                \n                if (this.batchForm.holidays_except.indexOf(val) < 0)\n                    this.batchForm.holidays_except.push(val);\n\n                this.batchForm.errors.clear('holidays_except');\n                this.holiday = '';\n            },\n            remove(date){\n                let idx = this.batchForm.holidays_except.indexOf(date);\n                \n                if (idx < 0)\n                    return;\n\n                this.batchForm.holidays_except.splice(idx, 1);\n                this.holiday = '';\n            }\n        },\n        filters: {\n          momentWithDay(date) {\n            return helper.formatDateWithDay(date);\n          },\n        }\n    }\n</script>\n","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"form\",\n    {\n      on: {\n        submit: function ($event) {\n          $event.preventDefault()\n          return _vm.proceed.apply(null, arguments)\n        },\n        keydown: function ($event) {\n          return _vm.batchForm.errors.clear($event.target.name)\n        },\n      },\n    },\n    [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"academic.batch_name\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.batchForm.name,\n                    expression: \"batchForm.name\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"name\",\n                  placeholder: _vm.trans(\"academic.batch_name\"),\n                },\n                domProps: { value: _vm.batchForm.name },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(_vm.batchForm, \"name\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.batchForm, \"prop-name\": \"name\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"academic.course\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"v-select\",\n                {\n                  attrs: {\n                    label: \"name\",\n                    \"group-values\": \"courses\",\n                    \"group-label\": \"course_group\",\n                    \"group-select\": false,\n                    name: \"course_id\",\n                    id: \"course_id\",\n                    options: _vm.courses,\n                    placeholder: _vm.trans(\"academic.select_course\"),\n                  },\n                  on: {\n                    select: _vm.onCourseSelect,\n                    close: function ($event) {\n                      return _vm.batchForm.errors.clear(\"course_id\")\n                    },\n                    remove: function ($event) {\n                      _vm.batchForm.course_id = \"\"\n                    },\n                  },\n                  model: {\n                    value: _vm.selected_course,\n                    callback: function ($$v) {\n                      _vm.selected_course = $$v\n                    },\n                    expression: \"selected_course\",\n                  },\n                },\n                [\n                  !_vm.courses.length\n                    ? _c(\n                        \"div\",\n                        {\n                          staticClass: \"multiselect__option\",\n                          attrs: { slot: \"afterList\" },\n                          slot: \"afterList\",\n                        },\n                        [\n                          _vm._v(\n                            \"\\n                        \" +\n                              _vm._s(_vm.trans(\"general.no_option_found\")) +\n                              \"\\n                    \"\n                          ),\n                        ]\n                      )\n                    : _vm._e(),\n                ]\n              ),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.batchForm, \"prop-name\": \"course_id\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"academic.max_strength\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.batchForm.max_strength,\n                    expression: \"batchForm.max_strength\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"max_strength\",\n                  placeholder: _vm.trans(\"academic.max_strength\"),\n                },\n                domProps: { value: _vm.batchForm.max_strength },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(_vm.batchForm, \"max_strength\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.batchForm,\n                  \"prop-name\": \"max_strength\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\"div\", { staticClass: \"row\" }, [\n            _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"academic.roll_number_prefix\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.batchForm.roll_number_prefix,\n                        expression: \"batchForm.roll_number_prefix\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    attrs: {\n                      type: \"text\",\n                      name: \"roll_number_prefix\",\n                      placeholder: _vm.trans(\"academic.roll_number_prefix\"),\n                    },\n                    domProps: { value: _vm.batchForm.roll_number_prefix },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) return\n                        _vm.$set(\n                          _vm.batchForm,\n                          \"roll_number_prefix\",\n                          $event.target.value\n                        )\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.batchForm,\n                      \"prop-name\": \"roll_number_prefix\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"academic.roll_number_digit\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.batchForm.roll_number_digit,\n                        expression: \"batchForm.roll_number_digit\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    attrs: {\n                      type: \"text\",\n                      name: \"roll_number_digit\",\n                      placeholder: _vm.trans(\"academic.roll_number_digit\"),\n                    },\n                    domProps: { value: _vm.batchForm.roll_number_digit },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) return\n                        _vm.$set(\n                          _vm.batchForm,\n                          \"roll_number_digit\",\n                          $event.target.value\n                        )\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.batchForm,\n                      \"prop-name\": \"roll_number_digit\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n          ]),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"student.default_attendance_method\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.batchForm.default_attendance_method,\n                      expression: \"batchForm.default_attendance_method\",\n                    },\n                  ],\n                  staticClass: \"custom-select col-12\",\n                  attrs: { name: \"default_attendance_method\" },\n                  on: {\n                    change: function ($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function (o) {\n                          return o.selected\n                        })\n                        .map(function (o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.$set(\n                        _vm.batchForm,\n                        \"default_attendance_method\",\n                        $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      )\n                    },\n                  },\n                },\n                [\n                  _c(\"option\", { attrs: { value: \"\", selected: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"general.select_one\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _vm._l(_vm.attendance_methods, function (option) {\n                    return _c(\"option\", { domProps: { value: option.value } }, [\n                      _vm._v(\n                        \"\\n                    \" +\n                          _vm._s(option.text) +\n                          \"\\n                  \"\n                      ),\n                    ])\n                  }),\n                ],\n                2\n              ),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.batchForm,\n                  \"prop-name\": \"default_attendance_method\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"academic.batch_description\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"autosize-textarea\", {\n                attrs: {\n                  rows: \"1\",\n                  name: \"description\",\n                  placeholder: _vm.trans(\"academic.batch_description\"),\n                },\n                model: {\n                  value: _vm.batchForm.description,\n                  callback: function ($$v) {\n                    _vm.$set(_vm.batchForm, \"description\", $$v)\n                  },\n                  expression: \"batchForm.description\",\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.batchForm,\n                  \"prop-name\": \"description\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _vm.exam_observations.length\n        ? [\n            _c(\"h4\", { staticClass: \"card-title\" }, [\n              _vm._v(_vm._s(_vm.trans(\"exam.configuration\"))),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"row\" }, [\n              _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  [\n                    _c(\"label\", { attrs: { for: \"\" } }, [\n                      _vm._v(\n                        _vm._s(_vm.trans(\"exam.grade\")) +\n                          \" (\" +\n                          _vm._s(_vm.trans(\"exam.observation\")) +\n                          \")\"\n                      ),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\n                      \"v-select\",\n                      {\n                        attrs: {\n                          label: \"name\",\n                          name: \"exam_grade_id\",\n                          id: \"exam_grade_id\",\n                          options: _vm.exam_grades,\n                          placeholder: _vm.trans(\"exam.select_grade\"),\n                        },\n                        on: {\n                          select: _vm.onExamGradeSelect,\n                          close: function ($event) {\n                            return _vm.batchForm.errors.clear(\"exam_grade_id\")\n                          },\n                          remove: function ($event) {\n                            _vm.batchForm.exam_grade_id = \"\"\n                          },\n                        },\n                        model: {\n                          value: _vm.selected_exam_grade,\n                          callback: function ($$v) {\n                            _vm.selected_exam_grade = $$v\n                          },\n                          expression: \"selected_exam_grade\",\n                        },\n                      },\n                      [\n                        !_vm.exam_grades.length\n                          ? _c(\n                              \"div\",\n                              {\n                                staticClass: \"multiselect__option\",\n                                attrs: { slot: \"afterList\" },\n                                slot: \"afterList\",\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            \" +\n                                    _vm._s(\n                                      _vm.trans(\"general.no_option_found\")\n                                    ) +\n                                    \"\\n                        \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                      ]\n                    ),\n                    _vm._v(\" \"),\n                    _c(\"show-error\", {\n                      attrs: {\n                        \"form-name\": _vm.batchForm,\n                        \"prop-name\": \"exam_grade_id\",\n                      },\n                    }),\n                  ],\n                  1\n                ),\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  [\n                    _c(\"label\", { attrs: { for: \"\" } }, [\n                      _vm._v(_vm._s(_vm.trans(\"exam.observation\"))),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\n                      \"v-select\",\n                      {\n                        attrs: {\n                          label: \"name\",\n                          name: \"exam_observation_id\",\n                          id: \"exam_observation_id\",\n                          options: _vm.exam_observations,\n                          placeholder: _vm.trans(\"exam.select_observation\"),\n                        },\n                        on: {\n                          select: _vm.onExamObservationSelect,\n                          close: function ($event) {\n                            return _vm.batchForm.errors.clear(\n                              \"exam_observation_id\"\n                            )\n                          },\n                          remove: function ($event) {\n                            _vm.batchForm.exam_observation_id = \"\"\n                          },\n                        },\n                        model: {\n                          value: _vm.selected_exam_observation,\n                          callback: function ($$v) {\n                            _vm.selected_exam_observation = $$v\n                          },\n                          expression: \"selected_exam_observation\",\n                        },\n                      },\n                      [\n                        !_vm.exam_observations.length\n                          ? _c(\n                              \"div\",\n                              {\n                                staticClass: \"multiselect__option\",\n                                attrs: { slot: \"afterList\" },\n                                slot: \"afterList\",\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            \" +\n                                    _vm._s(\n                                      _vm.trans(\"general.no_option_found\")\n                                    ) +\n                                    \"\\n                        \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                      ]\n                    ),\n                    _vm._v(\" \"),\n                    _c(\"show-error\", {\n                      attrs: {\n                        \"form-name\": _vm.batchForm,\n                        \"prop-name\": \"exam_observation_id\",\n                      },\n                    }),\n                  ],\n                  1\n                ),\n              ]),\n            ]),\n          ]\n        : _vm._e(),\n      _vm._v(\" \"),\n      _vm.id\n        ? [\n            _c(\"h4\", { staticClass: \"card-title\" }, [\n              _vm._v(_vm._s(_vm.trans(\"calendar.holiday_configuration\"))),\n            ]),\n            _vm._v(\" \"),\n            _c(\"p\", { staticClass: \"alert alert-info\" }, [\n              _vm._v(\n                _vm._s(_vm.trans(\"academic.batch_holiday_except_date_tip\"))\n              ),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"row\" }, [\n              _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  [\n                    _c(\"datepicker\", {\n                      attrs: { bootstrapStyling: true },\n                      on: { selected: _vm.onSelected },\n                      model: {\n                        value: _vm.holiday,\n                        callback: function ($$v) {\n                          _vm.holiday = $$v\n                        },\n                        expression: \"holiday\",\n                      },\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"show-error\", {\n                      attrs: {\n                        \"form-name\": _vm.batchForm,\n                        \"prop-name\": \"dates\",\n                      },\n                    }),\n                  ],\n                  1\n                ),\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"col-12 col-sm-9\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  _vm._l(_vm.batchForm.holidays_except, function (date) {\n                    return _c(\n                      \"span\",\n                      { staticClass: \"label label-info m-r-10 m-b-10 p-10\" },\n                      [\n                        _vm._v(\n                          \"\\n                        \" +\n                            _vm._s(_vm._f(\"momentWithDay\")(date)) +\n                            \" \"\n                        ),\n                        _c(\"i\", {\n                          directives: [\n                            {\n                              name: \"tooltip\",\n                              rawName: \"v-tooltip\",\n                              value: _vm.trans(\"general.remove\"),\n                              expression: \"trans('general.remove')\",\n                            },\n                          ],\n                          staticClass: \"fas fa-times-circle cursor\",\n                          on: {\n                            click: function ($event) {\n                              return _vm.remove(date)\n                            },\n                          },\n                        }),\n                      ]\n                    )\n                  }),\n                  0\n                ),\n              ]),\n            ]),\n          ]\n        : _vm._e(),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"card-footer text-right\" },\n        [\n          _c(\n            \"router-link\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.id,\n                  expression: \"id\",\n                },\n              ],\n              staticClass: \"btn btn-danger waves-effect waves-light\",\n              attrs: { to: \"/academic/batch\" },\n            },\n            [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n          ),\n          _vm._v(\" \"),\n          !_vm.id\n            ? _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { type: \"button\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.$emit(\"cancel\")\n                    },\n                  },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"button\",\n            {\n              staticClass: \"btn btn-info waves-effect waves-light\",\n              attrs: { type: \"submit\" },\n            },\n            [\n              _vm.id\n                ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n            ]\n          ),\n        ],\n        1\n      ),\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=5fdb6ad2&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"C:\\\\Users\\\\admin\\\\Desktop\\\\BULK\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('5fdb6ad2')) {\n      api.createRecord('5fdb6ad2', component.options)\n    } else {\n      api.reload('5fdb6ad2', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=5fdb6ad2&\", function () {\n      api.rerender('5fdb6ad2', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/academic/batch/form.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=5fdb6ad2&\""],"mappings":";;;;;;;;;;AAgIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnRA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAOA;AAMA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAIA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAIA;AAAA;AAMA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAEA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAUA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAaA;AACA;AACA;;;;;;;;;;;;;ACjqBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAiBA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}
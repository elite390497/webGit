{"version":3,"file":"js/exam/report/topper.js?id=8c5378ecbc38a37bb6d5","sources":["webpack:///resources/js/views/exam/report/topper.vue","webpack:///./resources/js/views/exam/report/topper.vue","webpack:///./resources/js/views/exam/report/topper.vue?c369","webpack:///./resources/js/views/exam/report/topper.vue?1758","webpack:///./resources/js/views/exam/report/topper.vue?683b"],"sourcesContent":["<template>\n    <div>\n        <div class=\"page-titles\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-6\">\n                    <h3 class=\"text-themecolor\">{{trans('exam.topper_report')}}</h3>\n                </div>\n                <div class=\"col-12 col-sm-6\">\n                    <div class=\"action-buttons pull-right\">\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"container-fluid\">\n            <div class=\"card card-form\">\n                <div class=\"card-body p-t-20\">\n\t\t\t        <form @submit.prevent=\"submit\" @keydown=\"reportForm.errors.clear($event.target.name)\">\n\t\t\t            <div class=\"row\">\n\t\t\t                <div class=\"col-12 col-sm-3\">\n\t\t\t                    <div class=\"form-group\">\n\t\t\t                        <label for=\"\">{{trans('exam.exam')}} </label>\n\t\t\t                        <v-select label=\"name\" v-model=\"selected_exam\" name=\"exam_id\" id=\"exam_id\" :options=\"exams\" :placeholder=\"trans('exam.select_exam')\" @select=\"onExamSelect\" @close=\"reportForm.errors.clear('exam_id')\" @remove=\"reportForm.exam_id = ''\">\n\t\t\t                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exams.length\">\n\t\t\t                                {{trans('general.no_option_found')}}\n\t\t\t                            </div>\n\t\t\t                        </v-select>\n\t\t\t                        <show-error :form-name=\"reportForm\" prop-name=\"exam_id\"></show-error>\n\t\t\t                    </div>\n\t\t\t                </div>\n                            <div class=\"col-12 col-sm-3\">\n                                <div class=\"form-group\">\n                                    <label for=\"\">{{trans('academic.batch')}} </label>\n                                    <v-select label=\"name\" v-model=\"selected_batch\" group-values=\"batches\" group-label=\"course_group\" :group-select=\"false\" name=\"batch_id\" id=\"batch_id\" :options=\"batches\" :placeholder=\"trans('academic.select_batch')\" @select=\"onBatchSelect\" @close=\"reportForm.errors.clear('batch_id')\" @remove=\"reportForm.batch_id = ''\">\n                                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!batches.length\">\n                                            {{trans('general.no_option_found')}}\n                                        </div>\n                                    </v-select>\n                                    <show-error :form-name=\"reportForm\" prop-name=\"batch_id\"></show-error>\n                                </div>\n                            </div>\n\t\t\t            </div>\n\t\t\t            <div class=\"card-footer text-right\">\n\t\t\t                <button type=\"button\" @click=\"getReport\" class=\"btn btn-info waves-effect waves-light\">{{trans('general.print')}}</button>\n\t\t\t            </div>\n\t\t\t        </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n\texport default {\n        components : {  },\n        data() {\n            return {\n                reportForm: new Form({\n                    batch_id: '',\n                    exam_id: '',\n                    type: ''\n                },false),\n                types: [],\n                all_batches: [],\n                batches: [],\n                selected_batch: null,\n                exams: [],\n                selected_exam: null\n            }\n        },\n        mounted(){\n            if(helper.hasRole('student') || helper.hasRole('parent')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            if(!helper.hasPermission('access-exam-report') && !helper.hasPermission('access-class-teacher-wise-exam-report')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            this.getPreRequisite();\n        },\n        methods: {\n            hasPermission(permission){\n                return helper.hasPermission(permission);\n            },\n            getPreRequisite(){\n                let loader = this.$loading.show();\n                axios.get('/api/exam/report/pre-requisite')\n                    .then(response => {\n                        this.all_batches = response.batches;\n                        this.exams = response.exams;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },\n            getReport(){\n                let loader = this.$loading.show();\n                axios.post('/api/exam/report/topper', {\n                \tbatch_id: this.reportForm.batch_id,\n                    exam_id: this.reportForm.exam_id\n                })\n                .then(response => {\n                    let print = window.open(\"/print\");\n                    loader.hide();\n                    print.document.write(response);\n                })\n                .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                });\n            },\n            onBatchSelect(selectedOption){\n                this.reportForm.batch_id = selectedOption.id;\n            },\n            onExamSelect(selectedOption){\n                this.reportForm.batch_id = '';\n                this.selected_batch = null;\n                if (selectedOption.course_group_id)\n                    this.batches = this.all_batches.filter(o => o.course_group === selectedOption.course_group_name);\n                else\n                    this.batches = this.all_batches;\n\n                this.reportForm.exam_id = selectedOption.id;\n            }\n        },\n        watch: {\n        },\n        computed: {\n            authToken(){\n                return helper.getAuthToken();\n            }\n        }\n\t}\n</script>","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"page-titles\" }, [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"h3\", { staticClass: \"text-themecolor\" }, [\n            _vm._v(_vm._s(_vm.trans(\"exam.topper_report\"))),\n          ]),\n        ]),\n        _vm._v(\" \"),\n        _vm._m(0),\n      ]),\n    ]),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"container-fluid\" }, [\n      _c(\"div\", { staticClass: \"card card-form\" }, [\n        _c(\"div\", { staticClass: \"card-body p-t-20\" }, [\n          _c(\n            \"form\",\n            {\n              on: {\n                submit: function ($event) {\n                  $event.preventDefault()\n                  return _vm.submit.apply(null, arguments)\n                },\n                keydown: function ($event) {\n                  return _vm.reportForm.errors.clear($event.target.name)\n                },\n              },\n            },\n            [\n              _c(\"div\", { staticClass: \"row\" }, [\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"exam.exam\")) + \" \"),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"v-select\",\n                        {\n                          attrs: {\n                            label: \"name\",\n                            name: \"exam_id\",\n                            id: \"exam_id\",\n                            options: _vm.exams,\n                            placeholder: _vm.trans(\"exam.select_exam\"),\n                          },\n                          on: {\n                            select: _vm.onExamSelect,\n                            close: function ($event) {\n                              return _vm.reportForm.errors.clear(\"exam_id\")\n                            },\n                            remove: function ($event) {\n                              _vm.reportForm.exam_id = \"\"\n                            },\n                          },\n                          model: {\n                            value: _vm.selected_exam,\n                            callback: function ($$v) {\n                              _vm.selected_exam = $$v\n                            },\n                            expression: \"selected_exam\",\n                          },\n                        },\n                        [\n                          !_vm.exams.length\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"multiselect__option\",\n                                  attrs: { slot: \"afterList\" },\n                                  slot: \"afterList\",\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t                                \" +\n                                      _vm._s(\n                                        _vm.trans(\"general.no_option_found\")\n                                      ) +\n                                      \"\\n\\t\\t\\t                            \"\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.reportForm,\n                          \"prop-name\": \"exam_id\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"academic.batch\")) + \" \"),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"v-select\",\n                        {\n                          attrs: {\n                            label: \"name\",\n                            \"group-values\": \"batches\",\n                            \"group-label\": \"course_group\",\n                            \"group-select\": false,\n                            name: \"batch_id\",\n                            id: \"batch_id\",\n                            options: _vm.batches,\n                            placeholder: _vm.trans(\"academic.select_batch\"),\n                          },\n                          on: {\n                            select: _vm.onBatchSelect,\n                            close: function ($event) {\n                              return _vm.reportForm.errors.clear(\"batch_id\")\n                            },\n                            remove: function ($event) {\n                              _vm.reportForm.batch_id = \"\"\n                            },\n                          },\n                          model: {\n                            value: _vm.selected_batch,\n                            callback: function ($$v) {\n                              _vm.selected_batch = $$v\n                            },\n                            expression: \"selected_batch\",\n                          },\n                        },\n                        [\n                          !_vm.batches.length\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"multiselect__option\",\n                                  attrs: { slot: \"afterList\" },\n                                  slot: \"afterList\",\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n                                            \" +\n                                      _vm._s(\n                                        _vm.trans(\"general.no_option_found\")\n                                      ) +\n                                      \"\\n                                        \"\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.reportForm,\n                          \"prop-name\": \"batch_id\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"card-footer text-right\" }, [\n                _c(\n                  \"button\",\n                  {\n                    staticClass: \"btn btn-info waves-effect waves-light\",\n                    attrs: { type: \"button\" },\n                    on: { click: _vm.getReport },\n                  },\n                  [_vm._v(_vm._s(_vm.trans(\"general.print\")))]\n                ),\n              ]),\n            ]\n          ),\n        ]),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = [\n  function () {\n    var _vm = this,\n      _c = _vm._self._c\n    return _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n      _c(\"div\", { staticClass: \"action-buttons pull-right\" }),\n    ])\n  },\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./topper.vue?vue&type=template&id=88077e9c&\"\nimport script from \"./topper.vue?vue&type=script&lang=js&\"\nexport * from \"./topper.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"C:\\\\Users\\\\admin\\\\Desktop\\\\BULK\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('88077e9c')) {\n      api.createRecord('88077e9c', component.options)\n    } else {\n      api.reload('88077e9c', component.options)\n    }\n    module.hot.accept(\"./topper.vue?vue&type=template&id=88077e9c&\", function () {\n      api.rerender('88077e9c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/report/topper.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./topper.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./topper.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./topper.vue?vue&type=template&id=88077e9c&\""],"mappings":";;;;;;;;;;AAoDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAUA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;;;;;;;;;;;;;AC7MA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAiBA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}
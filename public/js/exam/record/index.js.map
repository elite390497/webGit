{"version":3,"file":"js/exam/record/index.js?id=ee0af3465f1288856d5e","sources":["webpack:///resources/js/views/exam/record/index.vue","webpack:///./resources/js/views/exam/record/index.vue","webpack:///./resources/js/views/exam/record/index.vue?f9cf","webpack:///./resources/js/views/exam/record/index.vue?e994","webpack:///./resources/js/views/exam/record/index.vue?f540"],"sourcesContent":["<template>\n    <div>\n        <div class=\"page-titles\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-6\">\n                    <h3 class=\"text-themecolor\">{{trans('exam.record')}}</h3>\n                </div>\n                <div class=\"col-12 col-sm-6\">\n                    <div class=\"action-buttons pull-right\">\n                        <button class=\"btn btn-info btn-sm\" @click=\"$router.push('/exam/record/observation')\"><i class=\"fas fa-list\"></i> <span class=\"d-none d-sm-inline\">{{trans('exam.record_observation')}}</span></button>\n                        <button class=\"btn btn-info btn-sm\" @click=\"$router.push('/exam/schedule')\"><i class=\"fas fa-list\"></i> <span class=\"d-none d-sm-inline\">{{trans('exam.schedule')}}</span></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"container-fluid\">\n            <div class=\"card card-form\">\n                <div class=\"card-body p-t-20\">\n\t\t\t        <form @submit.prevent=\"submit\" @keydown=\"recordForm.errors.clear($event.target.name)\">\n\t\t\t            <div class=\"row\">\n\t\t\t                <div class=\"col-12 col-sm-3\">\n\t\t\t                    <div class=\"form-group\">\n\t\t\t                        <label for=\"\">{{trans('exam.exam')}} </label>\n\t\t\t                        <v-select label=\"name\" :disabled=\"disable_filter\" v-model=\"selected_exam\" name=\"exam_id\" id=\"exam_id\" :options=\"exams\" :placeholder=\"trans('exam.select_exam')\" @select=\"onExamSelect\" @close=\"recordForm.errors.clear('exam_id')\" @remove=\"recordForm.exam_id = ''\">\n\t\t\t                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exams.length\">\n\t\t\t                                {{trans('general.no_option_found')}}\n\t\t\t                            </div>\n\t\t\t                        </v-select>\n\t\t\t                        <show-error :form-name=\"recordForm\" prop-name=\"exam_id\"></show-error>\n\t\t\t                    </div>\n\t\t\t                </div>\n\t\t\t                <div class=\"col-12 col-sm-3\">\n\t\t\t                    <div class=\"form-group\">\n\t\t\t                        <label for=\"\">{{trans('academic.batch')}} </label>\n\t\t\t                        <v-select label=\"name\" :disabled=\"disable_filter\" v-model=\"selected_batch\" group-values=\"batches\" group-label=\"course_group\" :group-select=\"false\" name=\"batch_id\" id=\"batch_id\" :options=\"batches\" :placeholder=\"trans('academic.select_batch')\" @select=\"onBatchSelect\" @close=\"recordForm.errors.clear('batch_id')\" @remove=\"recordForm.batch_id = ''\">\n\t\t\t                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!batches.length\">\n\t\t\t                                {{trans('general.no_option_found')}}\n\t\t\t                            </div>\n\t\t\t                        </v-select>\n\t\t\t                        <show-error :form-name=\"recordForm\" prop-name=\"batch_id\"></show-error>\n\t\t\t                    </div>\n\t\t\t                </div>\n\t\t\t                <div class=\"col-12 col-sm-3\">\n\t\t\t                    <div class=\"form-group\">\n\t\t\t                        <label for=\"\">{{trans('academic.subject')}} </label>\n\t\t\t                        <v-select label=\"name\" :disabled=\"disable_filter\" v-model=\"selected_subject\" name=\"subject_id\" id=\"subject_id\" :options=\"subjects\" :placeholder=\"trans('academic.select_subject')\" @select=\"onSubjectSelect\" @close=\"recordForm.errors.clear('subject_id')\" @remove=\"recordForm.subject_id = ''\">\n\t\t\t                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!subjects.length\">\n\t\t\t                                {{trans('general.no_option_found')}}\n\t\t\t                            </div>\n\t\t\t                        </v-select>\n\t\t\t                        <show-error :form-name=\"recordForm\" prop-name=\"subject_id\"></show-error>\n\t\t\t                    </div>\n\t\t\t                </div>\n\t\t\t            </div>\n\t\t\t            <div class=\"card-footer text-right\">\n\t\t\t                <button type=\"button\" v-if=\"! disable_filter\" @click=\"getStudents\" class=\"btn btn-info waves-effect waves-light\">{{trans('general.proceed')}}</button>\n                            <button type=\"button\" v-else @click=\"resetFilter\" class=\"btn btn-danger m-r-10\">{{trans('general.reset')}}</button>\n\t\t\t            </div>\n\n                        <div class=\"row\" v-if=\"recordForm.marks.length\">\n                            <div class=\"col-12 col-sm-3\">\n                                </div>\n                            <div class=\"col-12 col-sm-2\" v-for=\"detail in exam_assessment.details\" v-if=\"detail.is_applicable\">\n                                <div class=\"form-group\">\n                                    <label>{{detail.name}}</label>\n                                    <br />\n                                    <span class=\"help-block font-80pc\">{{trans('exam.assessment_detail', {max_mark: getRecordMaxMark(detail), pass_percentage: getRecordPassPercentage(detail)})}}</span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"row\" v-for=\"(mark,index) in recordForm.marks\">\n                            <div class=\"col-12 col-sm-3\">\n                                <div class=\"form-group\">\n                                    {{mark.name}} {{mark.roll_number}}\n                                </div>\n                            </div>\n                            <template>\n                                <div class=\"col-12 col-sm-2\" v-for=\"(ob_mark, idx) in mark.ob_marks\">\n                                    <div class=\"form-group\">\n                                        <input class=\"form-control\" type=\"text\" v-model=\"ob_mark.ob\" :name=\"getMarkName(index, idx)\" :placeholder=\"trans('exam.obtained_mark')\">\n                                        <show-error :form-name=\"recordForm\" :prop-name=\"getMarkName(index, idx)\"></show-error>\n                                    </div>\n                                </div>\n\n                            </template>\n                        </div>\n\n                        <div class=\"card-footer text-right\" v-if=\"recordForm.marks.length && ! disable_input\">\n                            <button type=\"button\" class=\"btn btn-danger\" key=\"delete-record\" v-confirm=\"{ok: confirmDelete()}\">{{trans('general.delete')}}</button>\n                            <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">{{trans('general.save')}}</button>\n                        </div>\n\t\t\t        </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n\texport default {\n        components : {  },\n        data() {\n            return {\n                recordForm: new Form({\n                    batch_id: '',\n                    exam_id: '',\n                    subject_id: '',\n                    marks: []\n                },false),\n                all_batches: [],\n                batches: [],\n                selected_batch: null,\n                exams: [],\n                selected_exam: null,\n                subjects: [],\n                selected_subject: null,\n                batch_with_subjects: [],\n                student_records: [],\n                exam_assessment: {},\n                exam_record: {},\n                disable_filter: false,\n                disable_input: true,\n                show_comment: false\n            }\n        },\n        mounted(){\n            if(!helper.hasPermission('store-exam-mark')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            this.getPreRequisite();\n        },\n        methods: {\n            hasPermission(permission){\n                return helper.hasPermission(permission);\n            },\n            getMarkName(index, idx){\n                return index+'_'+idx+'_mark';\n            },\n            getCommentName(index){\n                return index+'_comment';\n            },\n            getPreRequisite(){\n                let loader = this.$loading.show();\n                axios.get('/api/exam/record/pre-requisite')\n                    .then(response => {\n                        this.all_batches = response.batches;\n                        this.exams = response.exams;\n                        this.batch_with_subjects = response.batch_with_subjects;\n\n                        if(this.id)\n                            this.get();\n\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },\n            getSubjects(){\n                let loader = this.$loading.show();\n\n                this.subjects = [];\n                this.selected_subject = null;\n                let batch = this.batch_with_subjects.find(o => o.id == this.recordForm.batch_id);\n\n                if (typeof batch == 'undefined') {\n               \t\tloader.hide();\n                \treturn;\n                }\n\n                batch.subjects.forEach(subject => {\n                \tthis.subjects.push({\n                \t\tid: subject.id,\n                \t\tname: subject.name+' ('+subject.code+')'\n                \t});\n                });\n\n               \tloader.hide();\n            },\n            resetFilter(){\n                this.recordForm.marks = [];\n                this.student_records = [];\n                this.exam_assessment = {};\n                this.disable_filter = false;\n            },\n            getRecordMaxMark(detail){\n                if (this.exam_record) {\n                    let assessment_details = this.exam_record.options.hasOwnProperty('assessment_details') ? this.exam_record.options.assessment_details : [];\n                    let assessment_detail = assessment_details.find(o => o.id == detail.id);\n\n                    if (typeof assessment_detail != 'undefined') {\n                        return assessment_detail.max_mark;\n                    } else {\n                        return detail.max_mark;\n                    }\n                } else {\n                    return detail.max_mark;\n                }\n            },\n            getRecordPassPercentage(detail){\n                if (this.exam_record) {\n                    let assessment_details = this.exam_record.options.hasOwnProperty('assessment_details') ? this.exam_record.options.assessment_details : [];\n                    let assessment_detail = assessment_details.find(o => o.id == detail.id);\n\n                    if (typeof assessment_detail != 'undefined') {\n                        return assessment_detail.pass_percentage;\n                    } else {\n                        return detail.pass_percentage;\n                    }\n                } else {\n                    return detail.pass_percentage;\n                }\n            },\n            getStudents(){\n                let loader = this.$loading.show();\n                this.disable_filter = true;\n\n                axios.post('/api/exam/record/student', {\n                \texam_id: this.recordForm.exam_id,\n                \tbatch_id: this.recordForm.batch_id,\n                \tsubject_id: this.recordForm.subject_id\n                })\n                .then(response => {\n                    this.student_records = response.student_records;\n                    this.exam_assessment = response.exam_assessment;\n                    this.disable_input = response.exam_record.disable_input;\n                    this.exam_record = response.exam_record;\n                    this.recordForm.marks = [];\n                    this.student_records.forEach(student_record => {\n                        let is_absent = 0;\n                        let comment = '';\n                        if (response.exam_record && response.exam_record.marks) {\n                            let mark = response.exam_record.marks.find(o => o.id == student_record.id);\n\n                            if (typeof mark != 'undefined') {\n                                if (mark.hasOwnProperty('is_absent')) {\n                                    is_absent = mark.is_absent ? 1 : 0;\n                                }\n                                if (mark.hasOwnProperty('comment')) {\n                                    comment = mark.comment;\n                                }\n                            }\n                        }\n\n                        if (this.exam_record.options.hasOwnProperty('assessment_details')) {\n                            this.exam_assessment.details.forEach(detail => {\n                                let assessment_detail = this.exam_record.options.assessment_details.find(o => o.id == detail.id);\n                                if (typeof assessment_detail != 'undefined') {\n                                    detail.max_mark = assessment_detail.max_mark;\n                                    detail.pass_percentage = assessment_detail.pass_percentage;\n                                    detail.is_applicable = assessment_detail.is_applicable;\n                                } else {\n                                    detail.is_applicable = true;\n                                }\n                            })\n                        }\n\n                        let ob_marks = [];\n                        this.exam_assessment.details.forEach(detail => {\n                            let assessment_ob = 0;\n                            let assessment_comment = '';\n                            let assessment_is_absent = 0;\n                            if (response.exam_record && response.exam_record.marks) {\n                                let mark = response.exam_record.marks.find(o => o.id == student_record.id);\n                                if (typeof mark != 'undefined' && mark.hasOwnProperty('assessment_details')) {\n                                    let assessment_detail = mark.assessment_details.find(o => o.id == detail.id);\n                                    if (typeof assessment_detail != 'undefined') {\n                                        assessment_ob = assessment_detail.ob;\n                                        assessment_is_absent = assessment_detail.is_absent ? 1 : 0;\n                                        assessment_comment = assessment_detail.comment;\n                                    }\n                                }\n                            }\n\n                            detail.is_applicable = detail.hasOwnProperty('is_applicable') ? detail.is_applicable : true;\n\n                            if (detail.is_applicable) {\n                                ob_marks.push({\n                                    id: detail.id,\n                                    ob: assessment_ob,\n                                    is_absent: assessment_is_absent,\n                                    comment: assessment_comment\n                                })\n                            }\n                        });\n\n                        this.recordForm.marks.push({\n                            id: student_record.id,\n                            name: helper.getStudentName(student_record.student),\n                            roll_number: helper.getRollNumber(student_record),\n                            is_absent: is_absent,\n                            ob_marks: ob_marks,\n                            comment: comment\n                        });\n                    });\n\n                    this.recordForm.marks.sort(function(a, b) {\n                      var nameA = a.name.toUpperCase();\n                      var nameB = b.name.toUpperCase();\n                      if (nameA < nameB) {\n                        return -1;\n                      }\n                      if (nameA > nameB) {\n                        return 1;\n                      }\n                      return 0;\n                    });\n\n                    loader.hide();\n                })\n                .catch(error => {\n                    this.disable_filter = false;\n                \tloader.hide();\n                \thelper.showErrorMsg(error);\n                });\n\n            },\n            submit(){\n                let loader = this.$loading.show();\n                this.recordForm.post('/api/exam/record')\n                    .then(response => {\n                        loader.hide();\n                        toastr.success(response.message);\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },\n            confirmDelete(){\n                return dialog => this.deleteRecord();\n            },\n            deleteRecord(){\n                let loader = this.$loading.show();\n                axios.post('/api/exam/record/delete', {\n                        batch_id: this.recordForm.batch_id,\n                        exam_id: this.recordForm.exam_id,\n                        subject_id: this.recordForm.subject_id\n                    })\n                    .then(response => {\n                        toastr.success(response.message);\n                        this.getStudents();\n                        loader.hide();\n                    }).catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            onBatchSelect(selectedOption){\n                this.recordForm.batch_id = selectedOption.id;\n            },\n            onExamSelect(selectedOption){\n                this.recordForm.batch_id = '';\n                this.selected_batch = null;\n                if (selectedOption.course_group_id)\n                    this.batches = this.all_batches.filter(o => o.course_group === selectedOption.course_group_name);\n                else\n                    this.batches = this.all_batches;\n                \n                this.recordForm.exam_id = selectedOption.id;\n            },\n            onSubjectSelect(selectedOption){\n                this.recordForm.subject_id = selectedOption.id;\n            }\n        },\n        watch: {\n            'recordForm.batch_id': function(val) {\n                if (!this.id)\n                    this.getSubjects();\n            }\n        }\n\t}\n</script>","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"page-titles\" }, [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"h3\", { staticClass: \"text-themecolor\" }, [\n            _vm._v(_vm._s(_vm.trans(\"exam.record\"))),\n          ]),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"div\", { staticClass: \"action-buttons pull-right\" }, [\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-info btn-sm\",\n                on: {\n                  click: function ($event) {\n                    return _vm.$router.push(\"/exam/record/observation\")\n                  },\n                },\n              },\n              [\n                _c(\"i\", { staticClass: \"fas fa-list\" }),\n                _vm._v(\" \"),\n                _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.record_observation\"))),\n                ]),\n              ]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-info btn-sm\",\n                on: {\n                  click: function ($event) {\n                    return _vm.$router.push(\"/exam/schedule\")\n                  },\n                },\n              },\n              [\n                _c(\"i\", { staticClass: \"fas fa-list\" }),\n                _vm._v(\" \"),\n                _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.schedule\"))),\n                ]),\n              ]\n            ),\n          ]),\n        ]),\n      ]),\n    ]),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"container-fluid\" }, [\n      _c(\"div\", { staticClass: \"card card-form\" }, [\n        _c(\"div\", { staticClass: \"card-body p-t-20\" }, [\n          _c(\n            \"form\",\n            {\n              on: {\n                submit: function ($event) {\n                  $event.preventDefault()\n                  return _vm.submit.apply(null, arguments)\n                },\n                keydown: function ($event) {\n                  return _vm.recordForm.errors.clear($event.target.name)\n                },\n              },\n            },\n            [\n              _c(\"div\", { staticClass: \"row\" }, [\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"exam.exam\")) + \" \"),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"v-select\",\n                        {\n                          attrs: {\n                            label: \"name\",\n                            disabled: _vm.disable_filter,\n                            name: \"exam_id\",\n                            id: \"exam_id\",\n                            options: _vm.exams,\n                            placeholder: _vm.trans(\"exam.select_exam\"),\n                          },\n                          on: {\n                            select: _vm.onExamSelect,\n                            close: function ($event) {\n                              return _vm.recordForm.errors.clear(\"exam_id\")\n                            },\n                            remove: function ($event) {\n                              _vm.recordForm.exam_id = \"\"\n                            },\n                          },\n                          model: {\n                            value: _vm.selected_exam,\n                            callback: function ($$v) {\n                              _vm.selected_exam = $$v\n                            },\n                            expression: \"selected_exam\",\n                          },\n                        },\n                        [\n                          !_vm.exams.length\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"multiselect__option\",\n                                  attrs: { slot: \"afterList\" },\n                                  slot: \"afterList\",\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t                                \" +\n                                      _vm._s(\n                                        _vm.trans(\"general.no_option_found\")\n                                      ) +\n                                      \"\\n\\t\\t\\t                            \"\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.recordForm,\n                          \"prop-name\": \"exam_id\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"academic.batch\")) + \" \"),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"v-select\",\n                        {\n                          attrs: {\n                            label: \"name\",\n                            disabled: _vm.disable_filter,\n                            \"group-values\": \"batches\",\n                            \"group-label\": \"course_group\",\n                            \"group-select\": false,\n                            name: \"batch_id\",\n                            id: \"batch_id\",\n                            options: _vm.batches,\n                            placeholder: _vm.trans(\"academic.select_batch\"),\n                          },\n                          on: {\n                            select: _vm.onBatchSelect,\n                            close: function ($event) {\n                              return _vm.recordForm.errors.clear(\"batch_id\")\n                            },\n                            remove: function ($event) {\n                              _vm.recordForm.batch_id = \"\"\n                            },\n                          },\n                          model: {\n                            value: _vm.selected_batch,\n                            callback: function ($$v) {\n                              _vm.selected_batch = $$v\n                            },\n                            expression: \"selected_batch\",\n                          },\n                        },\n                        [\n                          !_vm.batches.length\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"multiselect__option\",\n                                  attrs: { slot: \"afterList\" },\n                                  slot: \"afterList\",\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t                                \" +\n                                      _vm._s(\n                                        _vm.trans(\"general.no_option_found\")\n                                      ) +\n                                      \"\\n\\t\\t\\t                            \"\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.recordForm,\n                          \"prop-name\": \"batch_id\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"academic.subject\")) + \" \"),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"v-select\",\n                        {\n                          attrs: {\n                            label: \"name\",\n                            disabled: _vm.disable_filter,\n                            name: \"subject_id\",\n                            id: \"subject_id\",\n                            options: _vm.subjects,\n                            placeholder: _vm.trans(\"academic.select_subject\"),\n                          },\n                          on: {\n                            select: _vm.onSubjectSelect,\n                            close: function ($event) {\n                              return _vm.recordForm.errors.clear(\"subject_id\")\n                            },\n                            remove: function ($event) {\n                              _vm.recordForm.subject_id = \"\"\n                            },\n                          },\n                          model: {\n                            value: _vm.selected_subject,\n                            callback: function ($$v) {\n                              _vm.selected_subject = $$v\n                            },\n                            expression: \"selected_subject\",\n                          },\n                        },\n                        [\n                          !_vm.subjects.length\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"multiselect__option\",\n                                  attrs: { slot: \"afterList\" },\n                                  slot: \"afterList\",\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n\\t\\t\\t                                \" +\n                                      _vm._s(\n                                        _vm.trans(\"general.no_option_found\")\n                                      ) +\n                                      \"\\n\\t\\t\\t                            \"\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.recordForm,\n                          \"prop-name\": \"subject_id\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"card-footer text-right\" }, [\n                !_vm.disable_filter\n                  ? _c(\n                      \"button\",\n                      {\n                        staticClass: \"btn btn-info waves-effect waves-light\",\n                        attrs: { type: \"button\" },\n                        on: { click: _vm.getStudents },\n                      },\n                      [_vm._v(_vm._s(_vm.trans(\"general.proceed\")))]\n                    )\n                  : _c(\n                      \"button\",\n                      {\n                        staticClass: \"btn btn-danger m-r-10\",\n                        attrs: { type: \"button\" },\n                        on: { click: _vm.resetFilter },\n                      },\n                      [_vm._v(_vm._s(_vm.trans(\"general.reset\")))]\n                    ),\n              ]),\n              _vm._v(\" \"),\n              _vm.recordForm.marks.length\n                ? _c(\n                    \"div\",\n                    { staticClass: \"row\" },\n                    [\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }),\n                      _vm._v(\" \"),\n                      _vm._l(_vm.exam_assessment.details, function (detail) {\n                        return detail.is_applicable\n                          ? _c(\"div\", { staticClass: \"col-12 col-sm-2\" }, [\n                              _c(\"div\", { staticClass: \"form-group\" }, [\n                                _c(\"label\", [_vm._v(_vm._s(detail.name))]),\n                                _vm._v(\" \"),\n                                _c(\"br\"),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"span\",\n                                  { staticClass: \"help-block font-80pc\" },\n                                  [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.trans(\"exam.assessment_detail\", {\n                                          max_mark:\n                                            _vm.getRecordMaxMark(detail),\n                                          pass_percentage:\n                                            _vm.getRecordPassPercentage(detail),\n                                        })\n                                      )\n                                    ),\n                                  ]\n                                ),\n                              ]),\n                            ])\n                          : _vm._e()\n                      }),\n                    ],\n                    2\n                  )\n                : _vm._e(),\n              _vm._v(\" \"),\n              _vm._l(_vm.recordForm.marks, function (mark, index) {\n                return _c(\n                  \"div\",\n                  { staticClass: \"row\" },\n                  [\n                    _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                      _c(\"div\", { staticClass: \"form-group\" }, [\n                        _vm._v(\n                          \"\\n                                    \" +\n                            _vm._s(mark.name) +\n                            \" \" +\n                            _vm._s(mark.roll_number) +\n                            \"\\n                                \"\n                        ),\n                      ]),\n                    ]),\n                    _vm._v(\" \"),\n                    _vm._l(mark.ob_marks, function (ob_mark, idx) {\n                      return _c(\"div\", { staticClass: \"col-12 col-sm-2\" }, [\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"input\", {\n                              directives: [\n                                {\n                                  name: \"model\",\n                                  rawName: \"v-model\",\n                                  value: ob_mark.ob,\n                                  expression: \"ob_mark.ob\",\n                                },\n                              ],\n                              staticClass: \"form-control\",\n                              attrs: {\n                                type: \"text\",\n                                name: _vm.getMarkName(index, idx),\n                                placeholder: _vm.trans(\"exam.obtained_mark\"),\n                              },\n                              domProps: { value: ob_mark.ob },\n                              on: {\n                                input: function ($event) {\n                                  if ($event.target.composing) return\n                                  _vm.$set(ob_mark, \"ob\", $event.target.value)\n                                },\n                              },\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"show-error\", {\n                              attrs: {\n                                \"form-name\": _vm.recordForm,\n                                \"prop-name\": _vm.getMarkName(index, idx),\n                              },\n                            }),\n                          ],\n                          1\n                        ),\n                      ])\n                    }),\n                  ],\n                  2\n                )\n              }),\n              _vm._v(\" \"),\n              _vm.recordForm.marks.length && !_vm.disable_input\n                ? _c(\"div\", { staticClass: \"card-footer text-right\" }, [\n                    _c(\n                      \"button\",\n                      {\n                        directives: [\n                          {\n                            name: \"confirm\",\n                            rawName: \"v-confirm\",\n                            value: { ok: _vm.confirmDelete() },\n                            expression: \"{ok: confirmDelete()}\",\n                          },\n                        ],\n                        key: \"delete-record\",\n                        staticClass: \"btn btn-danger\",\n                        attrs: { type: \"button\" },\n                      },\n                      [_vm._v(_vm._s(_vm.trans(\"general.delete\")))]\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"button\",\n                      {\n                        staticClass: \"btn btn-info waves-effect waves-light\",\n                        attrs: { type: \"submit\" },\n                      },\n                      [_vm._v(_vm._s(_vm.trans(\"general.save\")))]\n                    ),\n                  ])\n                : _vm._e(),\n            ],\n            2\n          ),\n        ]),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=8afd16d6&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"C:\\\\Users\\\\admin\\\\Desktop\\\\BULK\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('8afd16d6')) {\n      api.createRecord('8afd16d6', component.options)\n    } else {\n      api.reload('8afd16d6', component.options)\n    }\n    module.hot.accept(\"./index.vue?vue&type=template&id=8afd16d6&\", function () {\n      api.rerender('8afd16d6', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/record/index.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=template&id=8afd16d6&\""],"mappings":";;;;;;;;;;AAovXA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAQA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAOA;AAAA;AAKA;AAEA;AAEA;AAQA;AAOA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAYA;AAAA;AAAA;AAGA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AAIA;AAGA;AAAA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;;;;;;;;;;;;;ACvcA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAiBA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}